/*
 * Copyright (C) 2022 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/routr
 *
 * This file is part of Routr
 *
 * Licensed under the MIT License (the "License")
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package fonoster.routr.connect.peers.v2draft1;

import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "acl.proto";
import "credentials.proto";

// The Peer service definition
service Peers {
  // Creates a new Peer
  rpc Create (CreatePeerRequest) returns (Peer) {}
  // Updates an existing Peer
  rpc Update (UpdatePeerRequest) returns (Peer) {}
  // Gets an existing Peer
  rpc Get (GetPeerRequest) returns (Peer) {}
  // Deletes an existing Peer
  rpc Delete (DeletePeerRequest) returns (.google.protobuf.Empty) {}
  // Lists all Peers
  rpc List (ListPeersRequest) returns (ListPeersResponse) {}
  // Find Agents by field name and value
  rpc FindBy (FindByRequest) returns (FindByResponse) {}
}

// The message for the Peer resource
message Peer {
  // The API version of the Peer
  string api_version = 1;
  // The unique identifier of the Peer
  string ref = 2;
  // The name of the Peer
  string name = 3;
  // The username of the Peer
  string username = 4;
  // The address of record of the Peer
  string aor = 5;
  // The contact address of the Peer
  string contact_addr = 6;
  // The status of the Peer
  bool enabled = 7;
  // The date and time when the Peer was created
  int32 created_at = 8;
  // The date and time when the Peer was last updated
  int32 updated_at = 9;
  // The list of IP addresses that are allowed to access the Peer
  fonoster.routr.connect.acl.v2draft1.AccessControlList access_control_list = 10;
  // The credentials of the Peer
  fonoster.routr.connect.credentials.v2draft1.Credentials credentials = 11;
  // The extended attributes of the Peer
  .google.protobuf.Struct extended = 12;
}

// The request message for the Peers.Create method
message CreatePeerRequest  {
  // The name of the Peer
  string name = 1;
  // The username of the Peer
  string username = 2;
  // The address of record of the Peer
  string aor = 3;
  // The contact address of the Peer
  string contact_addr = 4;
  // The status of the Peer
  bool enabled = 5;
  // Reference to the ACL of the Peer
  string access_control_list_ref = 6;
  // Reference to the Credentials of the Peer
  string credentials_ref = 7;
  // The extended attributes of the Peer
  .google.protobuf.Struct extended = 8;
}

// The request message for the Peers.Update method
message UpdatePeerRequest {
  // The unique identifier of the Peer
  string ref = 1;
  // The name of the Peer
  string name = 2;
  // The username of the Peer
  string username = 3;
  // The address of record of the Peer
  string aor = 4;
  // The contact address of the Peer
  string contact_addr = 5;
  // The status of the Peer
  bool enabled = 6;
  // Reference to the ACL of the Peer
  string access_control_list_ref = 7;
  // Reference to the Credentials of the Peer
  string credentials_ref = 8;
  // The extended attributes of the Peer
  .google.protobuf.Struct extended = 9;
}

// The request message for the Peers.Get method
message GetPeerRequest {
  // The unique identifier of the Peer
  string ref = 1;
}

// The request message for the Peers.Delete method
message DeletePeerRequest {
  // The unique identifier of the Peer
  string ref = 1;
}

// The request message for the Peers.FindBy method
message FindByRequest {
  // The field name to search
  string fieldName = 1;
  // The value to search
  string fieldValue = 2;
}

// The response message for the Peers.FindBy method
message FindByResponse {
  // The list of Peers items
  repeated Peer items = 1;
} 

message ListPeersRequest {
  // The maximum number of items in the list
  int32 page_size = 1;

  // The next_page_token value returned from the previous request, if any
  string page_token = 2;
}

message ListPeersResponse {
  // List of Peers items
  repeated Peer items = 1;

  // Token to retrieve the next page of results, or empty if there are no more results in the list
  string next_page_token = 2;
}
